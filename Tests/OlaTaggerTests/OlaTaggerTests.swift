@testable import OlaTagger
import XCTest

let testData: UData = [
    0x49, 0x44, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1A, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00,
    0x00, 0x1F, 0x00, 0x00, 0x01, 0xFF, 0xFE, 0x1D, 0x04, 0x30, 0x04, 0x37, 0x04, 0x32, 0x04, 0x30,
    0x04, 0x3D, 0x04, 0x38, 0x04, 0x35, 0x04, 0x20, 0x00, 0x42, 0x04, 0x40, 0x04, 0x35, 0x04, 0x3A,
    0x04, 0x30, 0x04, 0x54, 0x50, 0x45, 0x31, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x01, 0xFF, 0xFE,
    0x18, 0x04, 0x41, 0x04, 0x3F, 0x04, 0x3E, 0x04, 0x3B, 0x04, 0x3D, 0x04, 0x38, 0x04, 0x42, 0x04,
    0x35, 0x04, 0x3B, 0x04, 0x4C, 0x04, 0x54, 0x41, 0x4C, 0x42, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00,
    0x01, 0xFF, 0xFE, 0x1D, 0x04, 0x30, 0x04, 0x37, 0x04, 0x32, 0x04, 0x30, 0x04, 0x3D, 0x04, 0x38,
    0x04, 0x35, 0x04, 0x20, 0x00, 0x30, 0x04, 0x3B, 0x04, 0x4C, 0x04, 0x31, 0x04, 0x3E, 0x04, 0x3C,
    0x04, 0x30, 0x04, 0x41, 0x50, 0x49, 0x43, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x01, 0x69, 0x6D,
    0x61, 0x67, 0x65, 0x2F, 0x00, 0x04, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
    0x06, 0x07, 0x08, 0x09
]


final class OlaTaggerTests: XCTestCase {
    var url = URL.temporaryDirectory.appending(component: UUID().description)
    let size = UInt32(testData.count - 10)

    override func setUpWithError() throws {
        continueAfterFailure = false

        try Data(testData).write(to: url)
    }

    override func tearDownWithError() throws {
        try FileManager.default.removeItem(at: url)
    }

    // func test_modify_header() throws {
    //     var header: OlaTagger.ID3
    //     // let path = "/Users/bear/Desktop/01 - I Saw Her Standing There.mp3"
    //     let path = "/tmp/04 - Красная шапочка.mp3"
    //     let newPath = path.replacing(".mp3", with: " copy.mp3")
    //     try? FileManager.default.trashItem(at: URL(filePath: newPath), resultingItemURL: nil)
    //     try FileManager.default.copyItem(atPath: path, toPath: newPath)
    //     header = OlaTagger.ID3(url: URL(filePath: newPath))!
    //     print(header.size)
    //     // header.load()
    //     header[.title] = ID3.Frame.OneLine("Название трека", encoding: .utf16)
    //     header[.artist] = ID3.Frame.OneLine("Исполнитель", encoding: .utf16)
    //     header[.album] = ID3.Frame.OneLine("Название альбома", encoding: .utf16)
    //     header[.artwork] = ID3.Frame.Artwork(
    //         Data(Array(0..<10).map { UInt8($0) }),
    //         mime: "image/",
    //         type: .covba
    //     )
    //     try! header.write(keepFields: false)
    //     header.frames.forEach { print("\($0.name) \($0.size)") }
    //     return
    // }
    func test_read_header() throws {
        let header = ID3(url: url)!
        XCTAssertEqual(header.url, url)
        XCTAssertEqual(header.marker, "ID3")
        XCTAssertEqual(header.major, 3)
        XCTAssertEqual(header.minor, 0)
        XCTAssertEqual(header.flags, ID3.Flags(0))
        XCTAssertEqual(header.size, size)
        XCTAssertEqual(header.frames.count, 0, "Should be empty before loading")
    }
}
